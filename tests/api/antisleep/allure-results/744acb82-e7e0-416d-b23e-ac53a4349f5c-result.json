{"name": "Тест с незначительными пробелами перед email и паролем", "status": "broken", "statusDetails": {"message": "core.api_request.ApiException", "trace": "AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.api.antisleep.test_login.TestLogin object at 0x0000026BA19B7250>\ncluster = <rest.cluster.Cluster object at 0x0000026BA1AD4440>\n\n    @allure.title(\"Тест с незначительными пробелами перед email и паролем\")\n    @allure.tag(\"positive\")\n    def test_login_with_trimmed_input(self, cluster):\n        payload = {\n            \"email\": \" demo@demo.ru \",\n            \"password\": \" Demo1704@demo.ru \"\n        }\n>       response = cluster.login.post_login(params=payload)\n\ntest_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\rest\\login.py:20: in post_login\n    ).perform(check_ok=check_ok, verify=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Request [POST]>, check_ok = True, timeout = 10\nkwargs = {'verify': False}, log_level = 'INFO'\n\n    @allure.step('Requesting API')\n    def perform(self, check_ok=True, timeout=10, **kwargs):\n        \"\"\"Prepare and perform request to backend API\n    \n        :param check_ok: check if request went successful\n        :param timeout: http timeout for the request\n        :param verify: for verifying SSL certificate\n        :return response: `Response` instance\n        \"\"\"\n        log_level = LOG_LEVEL\n        if 'log_level' in kwargs.keys():\n            log_level = kwargs['log_level']\n            del kwargs['log_level']\n    \n        autolog(f'Requesting: {self.method} {self.prepared_request.url}')\n        allure.attach(repr(self.prepared_request.headers), name=f'{self.method} {self.url} request headers',\n                      attachment_type=allure.attachment_type.JSON)\n        allure.attach(repr(self.prepared_request.body), name=f'{self.method} {self.url} request body',\n                      attachment_type=allure.attachment_type.JSON)\n        if self.params:\n            allure.attach(repr(self.params), name=f'{self.method} {self.url} request params',\n                          attachment_type=allure.attachment_type.TEXT)\n        try:\n            self.response = self.session.send(self.prepared_request, timeout=timeout, **kwargs)\n        except ReadTimeout as e:\n            autolog(f'Failed to get answer for {e.request.method} to {e.request.path_url}', 'error')\n            autolog(f'Request header:\\n {e.request.headers} \\n', 'error')\n            autolog(f'Request body: \\n {e.request.body} \\n', 'error')\n            raise e\n    \n        autolog(f'Got response: {self.response.status_code}')\n    \n        autolog(f'REQUEST HEADERS: {self.response.request.headers}')\n        autolog(f'REQUEST BODY: {self.response.request.body}', log_level)\n        autolog(f'RESPONSE TIME: {self.response.elapsed.total_seconds() * 1000:.0f} ms')\n        autolog(f'RESPONSE HEADERS: {self.response.headers}', log_level)\n        autolog(f'RESPONSE BODY: {self.response.text}', log_level)\n    \n        allure.attach(repr(self.response.headers), name=f'{self.method} {self.url} raw response headers',\n                      attachment_type=allure.attachment_type.JSON)\n        allure.attach(repr(self.response.text), name=f'{self.method} {self.url} raw response text',\n                      attachment_type=allure.attachment_type.JSON)\n    \n        if len(self.response.content) > 0:\n            try:\n                # We almost every time need this JSON from data:\n                self.response.decoded_body = self.response.json()\n            except Exception as e:\n                autolog(\"Can't decode JSON body\", 'warning')\n                autolog(e, 'warning')\n    \n        if check_ok:\n            try:\n                assert self.response.ok\n            except AssertionError:\n                # Throw custom exception\n>               raise ApiException(self.response, self.prepared_request) from AssertionError\nE               core.api_request.ApiException\n\n..\\..\\..\\core\\api_request.py:115: ApiException"}, "steps": [{"name": "Отправка запроса post /login", "status": "broken", "statusDetails": {"message": "core.api_request.ApiException\n", "trace": "  File \"C:\\Users\\username\\PyProject\\noname\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\username\\PyProject\\noname\\rest\\login.py\", line 20, in post_login\n    ).perform(check_ok=check_ok, verify=False)\n      ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\username\\PyProject\\noname\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\username\\PyProject\\noname\\core\\api_request.py\", line 115, in perform\n    raise ApiException(self.response, self.prepared_request) from AssertionError\n"}, "steps": [{"name": "POST-запрос на https://stage-mgt.antisleep.ru/api/v1.00/public/login", "status": "broken", "statusDetails": {"message": "core.api_request.ApiException\n", "trace": "  File \"C:\\Users\\username\\PyProject\\noname\\rest\\login.py\", line 20, in post_login\n    ).perform(check_ok=check_ok, verify=False)\n      ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\username\\PyProject\\noname\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\username\\PyProject\\noname\\core\\api_request.py\", line 115, in perform\n    raise ApiException(self.response, self.prepared_request) from AssertionError\n"}, "steps": [{"name": "Requesting API", "status": "broken", "statusDetails": {"message": "core.api_request.ApiException\n", "trace": "  File \"C:\\Users\\username\\PyProject\\noname\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\username\\PyProject\\noname\\core\\api_request.py\", line 115, in perform\n    raise ApiException(self.response, self.prepared_request) from AssertionError\n"}, "attachments": [{"name": "POST https://stage-mgt.antisleep.ru/api/v1.00/public/login request headers", "source": "c3975ba4-4e8c-44f4-a661-a60e99b71089-attachment.json", "type": "application/json"}, {"name": "POST https://stage-mgt.antisleep.ru/api/v1.00/public/login request body", "source": "698b47ee-bb1f-4e8a-9609-b73659d3fb84-attachment.json", "type": "application/json"}, {"name": "POST https://stage-mgt.antisleep.ru/api/v1.00/public/login request params", "source": "2a35a40a-b883-4dd9-9169-31e08d1ac007-attachment.txt", "type": "text/plain"}, {"name": "POST https://stage-mgt.antisleep.ru/api/v1.00/public/login raw response headers", "source": "ea1e153c-121d-43af-ba7f-5d1e1cf65b30-attachment.json", "type": "application/json"}, {"name": "POST https://stage-mgt.antisleep.ru/api/v1.00/public/login raw response text", "source": "619d98bf-356d-4493-af02-90888475b522-attachment.json", "type": "application/json"}], "parameters": [{"name": "check_ok", "value": "True"}, {"name": "timeout", "value": "10"}, {"name": "verify", "value": "False"}], "start": 1745603608941, "stop": 1745603609345}], "start": 1745603608940, "stop": 1745603609347}], "parameters": [{"name": "params", "value": "{'email': ' demo@demo.ru ', 'password': ' Demo1704@demo.ru '}"}, {"name": "check_ok", "value": "True"}], "start": 1745603608940, "stop": 1745603609349}], "attachments": [{"name": "stderr", "source": "a42bc3bd-f56d-442c-944d-9db2d380f3fa-attachment.txt", "type": "text/plain"}], "start": 1745603608940, "stop": 1745603609350, "uuid": "1e5eabe5-be02-4eee-9d09-93041e9069bb", "historyId": "fab64ffcae9edfc656544977f5fc68b0", "testCaseId": "fab64ffcae9edfc656544977f5fc68b0", "fullName": "tests.api.antisleep.test_login.TestLogin#test_login_with_trimmed_input", "labels": [{"name": "tag", "value": "positive"}, {"name": "feature", "value": "Проверка аутентификации"}, {"name": "tag", "value": "BACK"}, {"name": "parentSuite", "value": "tests.api.antisleep"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-LQGJSGP"}, {"name": "thread", "value": "22608-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.antisleep.test_login"}]}